{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport function SettingsScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getData = function getData() {\n    var response, json;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.sampleapis.com/rickandmorty/characters\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setData(json);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n            _context.prev = 13;\n            setLoading(false);\n            return _context.finish(13);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10, 13, 16]], Promise);\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n\n  function handleHomePress() {\n    navigation.navigate(\"Home\");\n  }\n\n  return React.createElement(View, {\n    style: styles.screen\n  }, React.createElement(Text, null, \"The Settings Screen!\"), React.createElement(Button, {\n    title: \"Go to the Home screen!\",\n    onPress: handleHomePress\n  }), React.createElement(View, null, isLoading ? React.createElement(ActivityIndicator, null) : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(_ref2, index) {\n      var id = _ref2.id;\n      return id;\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(View, {\n        style: styles.itemWrapper\n      }, React.createElement(View, null, React.createElement(Image, {\n        style: styles.img,\n        source: {\n          uri: \"\" + item.image\n        }\n      })), React.createElement(View, null, React.createElement(Text, null, item.name), React.createElement(Text, null, item.origin), React.createElement(Text, null, item.species)));\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  },\n  itemWrapper: {\n    flexDirection: \"row\",\n    margin: 10\n  },\n  img: {\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Student/Documents/fantunovic/vjezbaKol2/screens/SettingsScreen.js"],"names":["React","useState","useEffect","SettingsScreen","route","navigation","isLoading","setLoading","data","setData","getData","fetch","response","json","console","log","handleHomePress","navigate","styles","screen","index","id","item","itemWrapper","img","uri","image","name","origin","species","StyleSheet","create","flex","flexDirection","margin","width","height","resizeMode"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;;;AAKA,OAAO,SAASC,cAAT,OAA+C;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAEpD,kBAAgCJ,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBN,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEWC,KAAK,CAAC,oDAAD,CAFhB;;AAAA;AAENC,YAAAA,QAFM;AAAA;AAAA,6CAGOA,QAAQ,CAACC,IAAT,EAHP;;AAAA;AAGNA,YAAAA,IAHM;AAIZJ,YAAAA,OAAO,CAACI,IAAD,CAAP;AAJY;AAAA;;AAAA;AAAA;AAAA;AAMZC,YAAAA,OAAO,CAACC,GAAR;;AANY;AAAA;AAQZR,YAAAA,UAAU,CAAC,KAAD,CAAV;AARY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAYAL,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASM,eAAT,GAA2B;AACzBX,IAAAA,UAAU,CAACY,QAAX,CAAoB,MAApB;AACD;;AACD,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACE,oBAAC,IAAD,+BADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,wBAAd;AAAuC,IAAA,OAAO,EAAEH;AAAhD,IAFF,EAIE,oBAAC,IAAD,QACGV,SAAS,GACR,oBAAC,iBAAD,OADQ,GAGR,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEE,IADR;AAEE,IAAA,YAAY,EAAE,6BAASY,KAAT;AAAA,UAAGC,EAAH,SAAGA,EAAH;AAAA,aAAmBA,EAAnB;AAAA,KAFhB;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,SAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACK;AAApB,SACE,oBAAC,IAAD,QACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAEL,MAAM,CAACM,GADhB;AAEE,QAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,OAAKH,IAAI,CAACI;AADP;AAFV,QADF,CADF,EASE,oBAAC,IAAD,QACE,oBAAC,IAAD,QAAOJ,IAAI,CAACK,IAAZ,CADF,EAEE,oBAAC,IAAD,QAAOL,IAAI,CAACM,MAAZ,CAFF,EAGE,oBAAC,IAAD,QAAON,IAAI,CAACO,OAAZ,CAHF,CATF,CADU;AAAA;AAHd,IAJJ,CAJF,CADF;AAoCD;AAED,IAAMX,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,MAAM,EAAE;AACNa,IAAAA,IAAI,EAAE;AADA,GADuB;AAK/BT,EAAAA,WAAW,EAAE;AACXU,IAAAA,aAAa,EAAE,KADJ;AAEXC,IAAAA,MAAM,EAAE;AAFG,GALkB;AAS/BV,EAAAA,GAAG,EAAE;AACHW,IAAAA,KAAK,EAAE,GADJ;AAEHC,IAAAA,MAAM,EAAE,GAFL;AAGHC,IAAAA,UAAU,EAAE;AAHT;AAT0B,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Text, Button, StyleSheet, TouchableOpacity, ActivityIndicator, FlatList, Image } from \"react-native\";\n\n\n\nexport function SettingsScreen({ route, navigation }) {\n\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const getData = async () => {\n    try {\n      const response = await fetch(\"https://api.sampleapis.com/rickandmorty/characters\")\n      const json = await response.json()\n      setData(json)\n    } catch (error) {\n      console.log(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  function handleHomePress() {\n    navigation.navigate(\"Home\");\n  }\n  return (\n    <View style={styles.screen}>\n      <Text>The Settings Screen!</Text>\n      <Button title=\"Go to the Home screen!\" onPress={handleHomePress} />\n\n      <View>\n        {isLoading ? (\n          <ActivityIndicator />\n        ) : (\n          <FlatList\n            data={data}\n            keyExtractor={({ id }, index) => id}\n            renderItem={({ item }) => (\n              <View style={styles.itemWrapper}>\n                <View>\n                  <Image\n                    style={styles.img}\n                    source={{\n                      uri: `${item.image}`\n                    }}\n                  />\n                </View>\n                <View>\n                  <Text>{item.name}</Text>\n                  <Text>{item.origin}</Text>\n                  <Text>{item.species}</Text>\n                </View>\n\n              </View>\n            )}\n          />\n        )}\n      </View>\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n\n  },\n  itemWrapper: {\n    flexDirection: \"row\",\n    margin: 10\n  },\n  img: {\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\"\n  },\n\n});\n"]},"metadata":{},"sourceType":"module"}